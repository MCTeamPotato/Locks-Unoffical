buildscript {
	repositories {
		maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
		mavenCentral()
	}
	dependencies {
		classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
	}
}

plugins {
	id 'eclipse'
	id 'idea'
	id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
	id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

apply plugin: 'org.spongepowered.mixin'


base {
	archivesName = mod_id
}

java {
	toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
	mappings channel: "parchment", version: "2023.09.03-1.20.1"

	copyIdeResources = true
	runs {
		configureEach {
			workingDirectory project.file('run')

			// Recommended logging data for a userdev environment
			// The markers can be added/remove as needed separated by commas.
			// "SCAN": For mods scan.
			// "REGISTRIES": For firing of registry events.
			// "REGISTRYDUMP": For getting the contents of all registries.
			property 'forge.logging.markers', 'REGISTRIES'


			// Recommended logging level for the console
			// You can set various levels here.
			// Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
			property 'forge.logging.console.level', 'debug'

			mods {
				"${mod_id}" {
					source sourceSets.main
				}
			}
		}

		client {
			// Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
			property 'forge.enabledGameTestNamespaces', mod_id
		}

		server {
			property 'forge.enabledGameTestNamespaces', mod_id
			args '--nogui'
		}

		// This run config launches GameTestServer and runs all registered gametests, then exits.
		// By default, the server will crash when no gametests are provided.
		// The gametest system is also enabled by default for other run configs under the /test command.
		gameTestServer {
			property 'forge.enabledGameTestNamespaces', mod_id
		}

		data {
			// example of overriding the workingDirectory set in configureEach above
			workingDirectory project.file('run-data')

			// Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
			args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
		}
	}
}
/*
mixin {
    add sourceSets.main, "${mod_id}.refmap.json"

    config "${mod_id}.mixins.json"
}*/

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	maven {
		url = "https://maven.theillusivec4.top/"
	}
	maven {
		url 'https://maven.mcmoddev.com'
	}
	maven {
		name = "CurseMaven"
		url = "https://www.cursemaven.com"
	}
}

dependencies {
	// Specify the version of Minecraft to use.
	// Any artifact can be supplied so long as it has a "userdev" classifier artifact and is a compatible patcher artifact.
	// The "userdev" classifier will be requested and setup by ForgeGradle.
	// If the group id is "net.minecraft" and the artifact id is one of ["client", "server", "joined"],
	// then special handling is done to allow a setup of a vanilla dependency without the use of an external repository.
	minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

	annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {
	var replaceProperties = [
			minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
			forge_version: forge_version, forge_version_range: forge_version_range,
			loader_version_range: loader_version_range,
			mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
			mod_author: mod_author, mod_description: mod_description, mod_icon: mod_icon
	]

	inputs.properties replaceProperties

	filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
		expand replaceProperties + [project: project]
	}}

tasks.named('jar', Jar).configure {
	manifest {
		attributes([
				"Specification-Title": mod_name,
				"Specification-Vendor": mod_author,
				"Specification-Version": "1", // We are version 1 of ourselves
				"Implementation-Title": project.name,
				"Implementation-Version": project.jar.archiveVersion,
				"Implementation-Vendor": mod_author,
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}

	// This is the preferred method to reobfuscate your jar file
	finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

sourceSets {
	main {
		resources {
			srcDirs += 'docs'
		}
	}
}